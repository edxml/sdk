==================
The Knowledge Base
==================

A :ref:`knowledge base <KnowledgeBase>` is stores three types of information originating from EDXML data:

- The reasoning graph
- Universals
- Concept instances

The reasoning graph and universals are both populated by using either a :ref:`KnowledgePullParser <KnowledgePullParser>` or a :ref:`KnowledgePushParser <KnowledgePushParser>` to parse some EDXML data. The reasoning graph is used for concept mining. As detailed in the EDXML specification, universals are things like name and descriptions for object values, originating specific property relations. Concept instances are not generated by parsing EDXML data. Rather, these are optionally generated by mining the reasoning graph after initially populating the knowledge base. The :func:`mine() <edxml.miner.knowledge.KnowledgeBase.mine()>` method can be used for that purpose. Mining results in the discovery of concept instances which are stored in the :attr:`concept_collection` attribute of the knowledge base.

A quick example to illustrate:

.. literalinclude:: ../edxml/examples/event_collector.py
  :language: Python

KnowledgeBase
-------------
.. _KnowledgeBase:

..  autoclass:: edxml.miner.knowledge.KnowledgeBase
    :members:
    :show-inheritance:

KnowledgePullParser
-------------------
.. _KnowledgePullParser:

..  autoclass:: edxml.miner.knowledge.KnowledgePullParser
    :members:
    :show-inheritance:

KnowledgePushParser
-------------------
.. _KnowledgePushParser:

..  autoclass:: edxml.miner.knowledge.KnowledgePushParser
    :members:
    :show-inheritance:

KnowledgeParserBase
-------------------
.. _KnowledgeParserBase:

..  autoclass:: edxml.miner.knowledge.KnowledgeParserBase
    :members:
    :show-inheritance:
