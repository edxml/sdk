==================
The Knowledge Base
==================

A :ref:`knowledge base <KnowledgeBase>` stores three types of information originating from EDXML data:

- The :doc:`reasoning graph <mining_graph>`
- Universals
- Concept instances

The reasoning graph and universals are both populated by using either a :ref:`KnowledgePullParser <KnowledgePullParser>` or a :ref:`KnowledgePushParser <KnowledgePushParser>` to parse some EDXML data. The reasoning graph is used for concept mining. As detailed in the `EDXML specification <http://edxml.org/spec/>`_, universals are things like names and descriptions for object values, originating from specific property relations. Concept instances are not generated by parsing EDXML data. Rather, these are optionally generated by mining the reasoning graph after initially populating the knowledge base. The :func:`mine() <edxml.miner.knowledge.KnowledgeParserBase.mine()>` method can be used for that purpose. Mining results in the discovery of concept instances which are stored in the :attr:`concept_collection <edxml.miner.knowledge.KnowledgeBase.concept_collection>` attribute of the knowledge base.

A quick example to illustrate:

.. literalinclude:: ../edxml/examples/mining_knowledge_base.py
  :language: Python

Concept Mining Seeds
--------------------

Concept mining always needs a starting seed. A starting seed is a specific event object that is used as a starting point for traversing the reasoning graph. The mining process will then 'grow' the concept by iteratively adding adjacent event objects in the graph to the concept. Just calling the :func:`mine() <edxml.miner.knowledge.KnowledgeParserBase.mine()>` method without any arguments will automatically find suitable seeds and mine them until all event objects in the graph have been assigned to a concept instance. In stead of automatic seed selection, a seed can be passed to the :func:`mine() <edxml.miner.knowledge.KnowledgeParserBase.mine()>` method. That will cause only this one seed to be mined and a single concept being added to the knowledge base.

Class Documentation
-------------------

The class documentation can be found below.

- KnowledgeBase_
- KnowledgePullParser_
- KnowledgePushParser_
- KnowledgeParserBase_

KnowledgeBase
^^^^^^^^^^^^^
.. _KnowledgeBase:

..  autoclass:: edxml.miner.knowledge.KnowledgeBase
    :members:
    :show-inheritance:

KnowledgePullParser
^^^^^^^^^^^^^^^^^^^
.. _KnowledgePullParser:

..  autoclass:: edxml.miner.knowledge.KnowledgePullParser
    :members:
    :show-inheritance:

KnowledgePushParser
^^^^^^^^^^^^^^^^^^^
.. _KnowledgePushParser:

..  autoclass:: edxml.miner.knowledge.KnowledgePushParser
    :members:
    :show-inheritance:

KnowledgeParserBase
^^^^^^^^^^^^^^^^^^^
.. _KnowledgeParserBase:

..  autoclass:: edxml.miner.knowledge.KnowledgeParserBase
    :members:
    :show-inheritance:
