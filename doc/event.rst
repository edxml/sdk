EDXML Event Representations
===========================

EDXML events are represented as instances of the EDXMLEvent_ class and its subclasses.

Accessing Properties
--------------------

The event properties are accessible by means of the :attr:`properties <edxml.EDXMLEvent.properties>` attribute. The objects of each property are stored as sets. To make accessing properties as convenient as possible, events implement a `MutableMapping <https://docs.python.org/3/library/collections.html>`_, allowing more direct access. A quick example:

.. literalinclude:: ../edxml/examples/event_representation_properties_dict_read.py
  :language: Python

Note that the event that we created above is incomplete. It is not even valid. We did not set an event type or an event source. EDXMLEvent instances are not bound to an ontology. As such there is no concept of validity in its instances. You can create any event you like, valid or invalid. Validating an instance can be done by means of its :func:`is_valid() <edxml.EDXMLEvent.is_valid>` method, which accepts an ontology as parameter.

Due to events not being bound to an ontology there is no differentiation between a property that does not exist and a property that exists but is lacking any objects. Therefore, checking if the properties dictionary has a certain key will return ``False`` even if that key has been assigned an empty set.

Writing event properties works just as you would expect. Some examples are shown below.

.. literalinclude:: ../edxml/examples/event_representation_properties_dict_write.py
  :language: Python

Accessing Attachments
---------------------

Event attachments can be accessed by means of the :attr:`attachments <edxml.EDXMLEvent.attachments>` attribute. This attribute is a dictionary mapping attachment names to the attachment values. The attachment values are also a dictionary mapping attachment identifiers to their string values. Another quick example:

.. literalinclude:: ../edxml/examples/event_representation_attachments_dict.py
  :language: Python

As you can see in the above example, explicitly setting the identifiers of individual attachment values is not needed. When omitted, the SHA1 hashes of the attachment values will be used as identifiers.

EDXMLEvent Subclasses
---------------------

The EDXMLEvent_ class has two subclasses. The first one is the ParsedEvent_ class. As the name suggests, this class is instantiated by EDXML parsers. In fact, it can only be instantiated by `lxml <http://lxml.de/>`_, which is the library that the EDXML parser is built on. Its instances are a mix of a regular EDXMLEvent_ and a `etree.Element <http://lxml.de/tutorial.html#the-element-class>`_ instance. The reason for a separate parsed event variant is performance: The lxml library can generate these objects at minimal cost and can be passed through to EDXML writers for re-serialization at minimal cost.

The second subclass of EDXMLEvent_ is EventElement_. This class is a wrapper around an lxml ``etree.Element`` instance containing an ``<event>`` XML element, providing the same convenient access interface as its parent, EDXMLEvent_. The EventElement_ is mainly used for generating events that are intended for feeding to EDXML writers.

Object Value Types
------------------

Since EDXML data is XML, all object values in an EDXML document are strings. As a result, the events that are generated by the parser will only contain values of type str. When writing object values into an event Python types other than str can be used. For example, writing a float into an event object is perfectly fine.

What happens when a non-string value is written into an event depends on the particular event implementation. The base class EDXMLEvent_ does not care about the values stored in its properties, until it needs to be converted into an EventElement_. This happens when the event is written using a :doc:`transcoder <transcoding>` or using the :class:`EDXMLWriter <edxml.writer.EDXMLWriter>`. At that point any non-string values are converted into strings. If that fails, an exception is raised.

Instances of EventElement_ are both an EDXML event and an XML element and the conversion to strings happens immediately when a property is written. This means that, in general, writing an event property may raise an exception.

The EDXML event implementations can convert various Python types into strings. These types include float, bool, datetime, Decimal and IP (from `IPy <https://pypi.org/project/IPy/>`_).

Illegal XML characters
----------------------

Some types of characters are illegal in XML. For that reason writing an object value string into an event can raise a ValueError. Using the :func:`replace_invalid_characters() <edxml.EDXMLEvent.replace_invalid_characters>` function illegal characters can be automatically replaced by replacement characters.

Class Documentation
-------------------

The class documentation of the various event implementations can be found below.


- EDXMLEvent_
- ParsedEvent_
- EventElement_

EDXMLEvent
^^^^^^^^^^
.. _EDXMLEvent:

.. autoclass:: edxml.EDXMLEvent
    :members:
    :show-inheritance:

ParsedEvent
^^^^^^^^^^^
.. _ParsedEvent:

.. autoclass:: edxml.ParsedEvent
    :members:
    :show-inheritance:

EventElement
^^^^^^^^^^^^
.. _EventElement:

.. autoclass:: edxml.EventElement
    :members:
    :show-inheritance:
