# -*- coding: utf-8 -*-

import edxml
import io

from lxml import etree
from typing import Union, List, Type


class ProcessingInterrupted(Exception):
    pass


class EDXMLParserBase(object):

    def __init__(self, validate: bool=True) -> None:
        super(EDXMLParserBase, self).__init__()

        self._ontology = ...                # type: edxml.ontology.Ontology
        self._element_iterator = ...         # type: etree.Element
        self._event_class = ...

        self.__current_event_type = ...
        self.__current_event_source_uri = ...
        self.__current_event_source = ...
        self.__current_group_event_count = ...
        self.__root_element = ...
        self.__current_group_element = ...
        self.__event_groups_element = ...
        self.__previous_root_length = ...
        self.__num_parsed_events = ...
        self.__num_parsed_event_types = ...
        self.__event_type_handlers = ...
        self.__event_source_handlers = ...
        self.__current_event_handlers = ...
        self.__source_uri_pattern_map = ...
        self.__schema = ...
        self.__event_type_schema_cache = ...
        self.__event_type_schema = ...
        self.__validate = ...

    def _close(self) -> 'EDXMLParserBase': ...

    def set_event_type_handler(self, event_types: List[str], handler: callable) -> 'EDXMLParserBase': ...

    def set_event_source_handler(self, source_patterns: List[str], handler: callable) -> 'EDXMLParserBase': ...

    def set_custom_event_class(self, event_class: Type[etree.ElementBase]) -> 'EDXMLParserBase': ...

    def get_event_counter(self) -> int: ...

    def get_event_type_counter(self, event_type_name) -> int: ...

    def get_ontology(self) -> edxml.ontology.Ontology: ...

    def get_event_type_schema(self, event_type_name: str) -> etree.RelaxNG: ...

    def __find_root_element(self, event_element: etree.Element) -> None: ...

    def _validate_xml_tree(self) -> None: ...

    def __validate_definitions_element(self, ontology_element: etree.Element) -> None: ...

    def __process_ontology(self, ontology_element: etree.Element) -> None: ...

    def _parsed_ontology(self, ontology: edxml.ontology.Ontology) -> None: ...

    def _parse_edxml(self) -> None: ...

    def __parse_event(self, event: edxml.ParsedEvent) -> None: ...

    def __parse_event_group(self, group_element: etree.Element) -> None: ...

    def _close_event_group(self, event_type_name: str, event_source_id: str) -> None: ...

    def _open_event_group(self, event_type_name: str, event_source_id: str) -> None: ...

    def _parsed_event(self, event: edxml.ParsedEvent) -> None: ...


class EDXMLPullParser(EDXMLParserBase):

    def parse(self, input_file: Union[io.TextIOBase, file, str]) -> 'EDXMLPullParser': ...

    def _parsed_ontology(self, ontology: edxml.ontology.Ontology) -> None: ...

    def _parsed_event(self, event: edxml.ParsedEvent) -> None: ...


class EDXMLPushParser(EDXMLParserBase):

    def __init__(self, validate: bool = True) -> None:
        super(EDXMLPushParser).__init__(validate)
        self.__input_parser = ... # type: etree.XMLPullParser
        self.__feed_target = ... # type: object

    def feed(self, data: str) -> None: ...

    def set_feed_target(self, target: object) -> 'EDXMLParserBase': ...

    def _parsed_event(self, event: edxml.ParsedEvent) -> None: ...


class EDXMLOntologyPullParser(EDXMLPullParser):
    ...


class EDXMLOntologyPushParser(EDXMLPushParser):
    ...
