# -*- coding: utf-8 -*-

import edxml

from lxml import etree
from typing import Any
from typing import Dict

from edxml.ontology import OntologyElement


class PropertyRelation(OntologyElement):

    def __init__(self, event_type: edxml.ontology.EventType, source: edxml.ontology.EventProperty,
                 target: edxml.ontology.EventProperty, description: str, type_class: str, type_predicate: str,
                 confidence: float = 10, directed: bool = True) -> None:

        self.__attr = ...      # type: Dict[str, Any]
        self.__event_type = ...  # type: edxml.ontology.EventType

    def _child_modified_callback(self) -> 'PropertyRelation': ...

    def _set_attr(self, key: str, value): ...

    def get_source(self) -> str: ...

    def get_target(self) -> str: ...

    def get_description(self) -> str: ...

    def get_type(self) -> str: ...

    def get_type_class(self) -> str: ...

    def get_type_predicate(self) -> str: ...

    def get_confidence(self) -> int: ...

    def is_directed(self) -> bool: ...

    def because(self, reason: str) -> 'PropertyRelation': ...

    def set_confidence(self, confidence: int): ...

    def directed(self) -> 'PropertyRelation': ...

    def undirected(self) -> 'PropertyRelation': ...

    def validate(self) -> 'PropertyRelation': ...

    @classmethod
    def create_from_xml(cls, relation_element: etree.Element,
                        event_type: edxml.ontology.EventType) -> 'PropertyRelation': ...

    def update(self, property_relation: 'PropertyRelation') -> 'PropertyRelation': ...

    def generate_xml(self) -> etree.Element: ...
