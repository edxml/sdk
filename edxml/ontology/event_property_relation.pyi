# -*- coding: utf-8 -*-

import edxml

from lxml import etree
from typing import Any
from typing import Dict


class PropertyRelation(object):

    def __init__(self, EventType: edxml.ontology.EventType, Source: edxml.ontology.EventProperty,
                 Dest: edxml.ontology.EventProperty, Description: str, TypeClass: str,
                 TypePredicate: str, Confidence: float = 10, Directed: bool = True) -> None:

        self._attr = ...      # type: Dict[str, Any]
        self._eventType = ...  # type: edxml.ontology.EventType

    def _childModifiedCallback(self) -> 'PropertyRelation': ...

    def _setAttr(self, key: str, value): ...

    def GetSource(self) -> str: ...

    def GetTarget(self) -> str: ...

    def GetDescription(self) -> str: ...

    def GetType(self) -> str: ...

    def GetTypeClass(self) -> str: ...

    def GetTypePredicate(self) -> str: ...

    def GetConfidence(self) -> int: ...

    def IsDirected(self) -> bool: ...

    def Because(self, Reason: str) -> 'PropertyRelation': ...

    def SetConfidence(self, Confidence: int): ...

    def Directed(self) -> 'PropertyRelation': ...

    def Undirected(self) -> 'PropertyRelation': ...

    def Validate(self) -> 'PropertyRelation': ...

    @classmethod
    def Read(cls, relationElement: etree.Element, eventType: edxml.ontology.EventType) -> 'PropertyRelation': ...

    def Update(self, propertyRelation: 'PropertyRelation') -> 'PropertyRelation': ...

    def GenerateXml(self) -> etree.Element: ...
