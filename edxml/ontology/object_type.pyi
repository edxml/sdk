# -*- coding: utf-8 -*-

import edxml

from lxml import etree
from typing import Any
from typing import Dict


class ObjectType(object):
  NAME_PATTERN = ...
  DISPLAY_NAME_PATTERN = ...
  FUZZY_MATCHING_PATTERN = ...

  def __init__(self, Ontology: edxml.ontology.Ontology, Name: str, DisplayName: str = None, Description: str = None,
               DataType: str ='string:0:cs:u', Compress: bool = False, FuzzyMatching: str ='none',
               Regexp: str ='[\s\S]*') -> None:
    self._attr = ... # type: Dict[str, Any]

  def _childModifiedCallback(self, child) -> 'ObjectType': ...

  def GetName(self) -> str: ...

  def GetDisplayName(self) -> str: ...

  def GetDisplayNameSingular(self) -> str: ...

  def GetDisplayNamePlural(self) -> str: ...

  def GetDescription(self) -> str: ...

  def GetDataType(self) -> edxml.ontology.DataType: ...

  def IsCompressible(self) -> bool: ...

  def GetFuzzyMatching(self) -> str: ...

  def GetRegexp(self) -> str: ...

  def SetDescription(self, Description: str) -> 'ObjectType': ...

  def SetDataType(self, dataType: edxml.ontology.DataType) -> 'ObjectType': ...

  def SetDisplayName(self, Singular: str, Plural: str = None) -> 'ObjectType': ...

  def SetRegexp(self, Pattern: str) -> 'ObjectType': ...

  def SetFuzzyMatchingAttribute(self, attribute: str) -> 'ObjectType': ...

  def FuzzyMatchHead(self, Length: int) -> 'ObjectType': ...

  def FuzzyMatchTail(self, Length: int) -> 'ObjectType': ...

  def FuzzyMatchSubstring(self, Pattern: str) -> 'ObjectType': ...

  def FuzzyMatchPhonetic(self) -> 'ObjectType': ...

  def Compress(self) -> 'ObjectType': ...

  def GenerateRelaxNG(self) -> etree.Element: ...

  def ValidateObjectValue(self, value: unicode) -> 'ObjectType': ...

  def Validate(self) -> 'ObjectType': ...

  @classmethod
  def Read(cls, typeElement: etree.Element, ontology: edxml.ontology.Ontology) -> 'ObjectType': ...

  def Update(self, objectType: 'ObjectType') -> 'ObjectType': ...

  def GenerateXml(self) -> etree.Element: ...
