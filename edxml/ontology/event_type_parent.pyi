# -*- coding: utf-8 -*-
import edxml
from lxml import etree
from typing import Dict


class EventTypeParent(object):

  PROPERTY_MAP_PATTERN = ...

  def __init__(self, ChildEventType: edxml.ontology.EventType, ParentEventTypeName: str, PropertyMap: str,
               ParentDescription: str = None, SiblingsDescription: str = None) -> None:

    self._attr = ...
    self._childEventType = ... # type: edxml.ontology.EventType

  @classmethod
  def Create(cls, ChildEventType: edxml.ontology.EventType, ParentEventTypeName: str, PropertyMap: Dict[str, str],
             ParentDescription: str = None, SiblingsDescription: str = None) -> 'EventTypeParent': ...

  def _childModifiedCallback(self) -> 'EventTypeParent': ...

  def _setAttr(self, key: str, value): ...

  def SetParentDescription(self, Description: str) -> 'EventTypeParent': ...

  def SetSiblingsDescription(self, Description: str) -> 'EventTypeParent': ...

  def Map(self, ChildPropertyName: str, ParentPropertyName: str = None) -> 'EventTypeParent': ...

  def GetEventType(self) -> str: ...

  def GetPropertyMap(self) -> Dict[str, str]: ...

  def GetParentDescription(self) -> str: ...

  def GetSiblingsDescription(self) -> str: ...

  def Validate(self) -> 'EventTypeParent': ...

  @classmethod
  def Read(cls, parentElement: etree.Element, childEventType: edxml.ontology.EventType) -> 'EventTypeParent': ...

  def Update(self, parent: 'EventTypeParent') -> 'EventTypeParent': ...

  def GenerateXml(self) -> etree.Element: ...
