# -*- coding: utf-8 -*-

from lxml import etree
from typing import Dict


class EventTypeParent(object):

  PROPERTY_MAP_PATTERN = ...

  def __init__(self, ParentEventTypeName: str, PropertyMap: str, ParentDescription: str = None,
               SiblingsDescription: str = None) -> None:

    self._attr = ...

  @classmethod
  def Create(cls, ParentEventTypeName: str, PropertyMap: Dict[str, str], ParentDescription: str = None,
               SiblingsDescription: str = None) -> 'EventTypeParent': ...

  def SetParentDescription(self, Description: str) -> 'EventTypeParent': ...

  def SetSiblingsDescription(self, Description: str) -> 'EventTypeParent': ...

  def Map(self, ChildPropertyName: str, ParentPropertyName: str = None) -> 'EventTypeParent': ...

  def GetEventType(self) -> str: ...

  def GetPropertyMap(self) -> Dict[str, str]: ...

  def GetParentDescription(self) -> str: ...

  def GetSiblingsDescription(self) -> str: ...

  def Validate(self) -> 'EventTypeParent': ...

  @classmethod
  def Read(cls, parentElement: etree.Element) -> 'EventTypeParent': ...

  def Update(self, parent: 'EventTypeParent') -> 'EventTypeParent': ...

  def GenerateXml(self) -> etree.Element: ...
