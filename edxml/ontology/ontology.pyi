# -*- coding: utf-8 -*-
import lxml
import edxml

from lxml import etree
from typing import List, Dict, Union, Type


class Ontology(object):

    TEMPLATE_PATTERN = ...
    KNOWN_FORMATTERS = ...  # type: List[str]

    _bricks = {}  # type: Dict[edxml.ontology.Ontology]

    def __init__(self) -> None:
        self._version = ...       # type: int
        self._event_types = ...   # type: Dict[str, edxml.ontology.EventType]
        self._object_types = ...  # type: Dict[str, edxml.ontology.ObjectType]
        self._sources = ...       # type: Dict[str, edxml.ontology.EventSource]
        self._concepts = ...      # type: Dict[str, edxml.ontology.Concept]
        self._bricks = ...

    def _childModifiedCallback(self) -> 'Ontology': ...

    def GetVersion(self) -> int: ...

    def IsModifiedSince(self, version: int) -> bool: ...

    @classmethod
    def RegisterBrick(cls, ontologyBrick: Type[edxml.ontology.Brick]): ...

    def _importObjectTypeFromBrick(self, ObjectTypeName: str): ...

    def _importConceptFromBrick(self, ConceptName: str): ...

    def CreateObjectType(self, Name: str, DisplayNameSingular: str = None, DisplayNamePlural: str = None, Description: str = None, DataType: str ='string:0:cs:u') -> edxml.ontology.ObjectType: ...

    def CreateConcept(self, Name: str, DisplayNameSingular: str = None, DisplayNamePlural: str = None, Description: str = None) -> edxml.ontology.Concept: ...

    def CreateEventType(self, Name, DisplayNameSingular=None, DisplayNamePlural=None, Description=None) -> edxml.ontology.EventType: ...

    def CreateEventSource(self, Uri, Description='no description available', AcquisitionDate='00000000') -> edxml.ontology.EventSource: ...

    def _addEventType(self, eventType: edxml.ontology.EventType, validate: bool = True) -> 'Ontology': ...

    def _addObjectType(self, objectType: edxml.ontology.ObjectType, validate: bool = True) -> 'Ontology': ...

    def _addConcept(self, concept: edxml.ontology.Concept, validate: bool = True) -> 'Ontology': ...

    def _addEventSource(self, eventSource: edxml.ontology.EventSource, validate: bool = True) -> 'Ontology': ...

    def GetEventTypes(self) -> Dict[str, edxml.ontology.EventType]: ...

    def GetObjectTypes(self) -> Dict[str, edxml.ontology.ObjectType]: ...

    def GetConcepts(self) -> Dict[str, edxml.ontology.Concept]: ...

    def GetEventSources(self) -> Dict[str, edxml.ontology.EventSource]: ...

    def GetEventTypeNames(self) -> List[str]: ...

    def GetObjectTypeNames(self) -> List[str]: ...

    def GetConceptNames(self) -> List[str]: ...

    def GetEventType(self, Name: str) -> Union[edxml.ontology.EventType, None]: ...

    def GetObjectType(self, Name: str) -> Union[edxml.ontology.ObjectType, None]: ...

    def GetConcept(self, Name: str) -> Union[edxml.ontology.Concept, None]: ...

    def GetEventSource(self, Uri: str) -> Union[edxml.ontology.EventSource, None]: ...

    def __parseEventTypes(self, eventtypesElement: etree.Element): ...

    def __parseObjectTypes(self, objecttypesElement: etree.Element): ...

    def __parseConcepts(self, conceptsElement: etree.Element): ...

    def __parseSources(self, sourcesElement: etree.Element): ...

    def ValidateTemplate(self, EventType: edxml.ontology.EventType, template: str) -> 'Ontology': ...

    def Validate(self) -> 'Ontology': ...

    @classmethod
    def Read(cls, ontologyElement: etree.Element) -> 'Ontology': ...

    def AddBrick(self, ontologyBrick: edxml.ontology.Brick) -> 'Ontology': ...

    def Update(self, otherOntology: Union[lxml.etree.Element, 'Ontology'], validate: bool = True) -> 'Ontology': ...

    def GenerateXml(self) -> etree.Element: ...
