# -*- coding: utf-8 -*-

from lxml import etree
from edxml.ontology import EventType, EventProperty


class PropertyConcept(object):

    def __init__(self, event_type, property, name, confidence=10, naming_priority=128):

        self.__attr = ...

        self.__event_type = ...  # type: event_type
        self.__property = ...   # type: EventProperty

    def _child_modified_callback(self) -> 'PropertyConcept': ...

    def _set_attr(self, key, value): ...

    def get_concept_name(self) -> str: ...

    def get_property_name(self) -> str: ...

    def get_confidence(self) -> int: ...

    def get_concept_naming_priority(self) -> int: ...

    def set_confidence(self, confidence: int) -> 'PropertyConcept': ...

    def set_concept_naming_priority(self, priority: int) -> 'PropertyConcept': ...

    def validate(self) -> 'PropertyConcept': ...

    @classmethod
    def create_from_xml(cls, concept_element: etree.Element, event_type: EventType, property: EventProperty) -> \
            'PropertyConcept': ...

    def update(self, property_concept: 'PropertyConcept') -> 'PropertyConcept': ...

    def generate_xml(self) -> etree.Element: ...
