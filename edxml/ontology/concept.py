# -*- coding: utf-8 -*-
import re

from lxml import etree
from edxml.EDXMLBase import EDXMLValidationError


class Concept(object):
    """
    Class representing an EDXML concept
    """

    NAME_PATTERN = re.compile('^[a-z0-9.]{1,64}$')
    DISPLAY_NAME_PATTERN = re.compile("^[ a-zA-Z0-9]*/[ a-zA-Z0-9]*$")

    def __init__(self, ontology, name, display_name=None, description=None):

        self._attr = {
            'name': name,
            'display-name': display_name or ' '.join(('%s/%s' % (name, name)).split('.')),
            'description': description or name
        }

        self._ontology = ontology  # type: edxml.ontology.Ontology

    def _child_modified_callback(self):
        """Callback for change tracking"""
        self._ontology._child_modified_callback()
        return self

    def _set_attr(self, key, value):
        if self._attr[key] != value:
            self._attr[key] = value
            self._child_modified_callback()

    def get_name(self):
        """

        Returns the name of the concept.

        Returns:
          str: The concept name
        """

        return self._attr['name']

    def get_display_name(self):
        """

        Returns the display-name attribute of the concept.

        Returns:
          str:
        """

        return self._attr['display-name']

    def get_display_name_singular(self):
        """

        Returns the display name of the concept, in singular form.

        Returns:
          str:
        """

        return self._attr['display-name'].split('/')[0]

    def get_display_name_plural(self):
        """

        Returns the display name of the concept, in plural form.

        Returns:
          str:
        """

        return self._attr['display-name'].split('/')[1]

    def get_description(self):
        """

        Returns the description of the concept.

        Returns:
          str:
        """

        return self._attr['description']

    def set_description(self, description):
        """

        Sets the concept description

        Args:
          description (str): Description

        Returns:
          edxml.ontology.Concept: The Concept instance
        """

        self._set_attr('description', str(description))
        return self

    def set_display_name(self, singular, plural=None):
        """

        Configure the display name. If the plural form
        is omitted, it will be auto-generated by
        appending an 's' to the singular form.

        Args:
          singular (str): display name (singular form)
          plural (str): display name (plural form)

        Returns:
          edxml.ontology.Concept: The Concept instance
        """

        if plural is None:
            plural = '%ss' % singular

        self._set_attr('display-name', '%s/%s' % (singular, plural))
        return self

    def validate(self):
        """

        Checks if the concept is valid. It only looks
        at the attributes of the definition itself. Since it does
        not have access to the full ontology, the context of
        the ontology is not considered. For example, it does not
        check if other, conflicting concept definitions exist.

        Raises:
          EDXMLValidationError

        Returns:
          edxml.ontology.Concept: The Concept instance

        """
        if not len(self._attr['name']) <= 64:
            raise EDXMLValidationError(
                'The name of concept "%s" is too long.' % self._attr['name'])
        if not re.match(self.NAME_PATTERN, self._attr['name']):
            raise EDXMLValidationError(
                'Concept "%s" has an invalid name.' % self._attr['name'])

        if not len(self._attr['display-name']) <= 64:
            raise EDXMLValidationError(
                'The display name of concept "%s" is too long: "%s".' % (
                    self._attr['name'], self._attr['display-name'])
            )
        if not re.match(self.DISPLAY_NAME_PATTERN, self._attr['display-name']):
            raise EDXMLValidationError(
                'Concept "%s" has an invalid display name: "%s"' % (
                    self._attr['name'], self._attr['display-name'])
            )

        if not len(self._attr['description']) <= 128:
            raise EDXMLValidationError(
                'The description of concept "%s" is too long: "%s"' % (
                    self._attr['name'], self._attr['description'])
            )

        return self

    @classmethod
    def create_from_xml(cls, type_element, ontology):
        return cls(
            ontology,
            type_element.attrib['name'],
            type_element.attrib['display-name'],
            type_element.attrib['description'],
        )

    def update(self, concept):
        """
        Update the concept using information from the provided
        concept and validate the result.

        Args:
          concept (edxml.ontology.Concept): The new Concept instance

        Returns:
          edxml.ontology.Concept: The updated Concept instance

        """
        if self._attr['name'] != concept.get_name():
            raise Exception('Attempt to update concept "%s" with concept "%s".' %
                            (self._attr['name'], concept.get_name()))

        if self._attr['display-name'] != concept.get_display_name():
            raise Exception('Attempt to update concept "%s", but display names do not match.' % self._attr['name'],
                            (self._attr['display-name'], concept.get_name()))

        if self._attr['description'] != concept.get_description():
            raise Exception('Attempt to update concept "%s", but descriptions do not match.' % self._attr['name'],
                            (self._attr['description'], concept.get_name()))

        self.validate()

        return self

    def generate_xml(self):
        """

        Generates an lxml etree Element representing
        the EDXML <concept> tag for this concept.

        Returns:
          etree.Element: The element

        """

        return etree.Element('concept', self._attr)
