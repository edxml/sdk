# -*- coding: utf-8 -*-

import edxml

from collections import MutableMapping
from lxml import etree
from typing import Dict, Union, Generator, List, Set
from edxml.EDXMLBase import EvilCharacterFilter


class EDXMLEvent(MutableMapping):

    def __init__(self, Properties: Dict[str, List[unicode]], EventTypeName: str = None, SourceUri: str = None,
                 Parents: List[str] = None, Content: unicode = None) -> None:

        self.Properties = ...    # type: Dict[str, List[unicode]]
        self.EventTypeName = ...  # type: str
        self.SourceUri = ...     # type: str
        self.Parents = ...       # type: Set[str]
        self.Content = ...       # type: unicode

    def __str__(self) -> unicode: ...

    def __delitem__(self, key: str) -> None: ...

    def __setitem__(self, key: str, value: Union[str, List[unicode]]) -> None: ...

    def __len__(self) -> int: ...

    def __getitem__(self, key: str) -> List[unicode]: ...

    def __contains__(self, key: str) -> bool: ...

    def __iter__(self) -> Generator[Dict[str, List[unicode]], None, None]: ...

    def getAny(self, key: str, default: str=None) -> Union[unicode, None]: ...

    def copy(self) -> 'EDXMLEvent': ...

    @classmethod
    def Create(cls, Properties: Dict[str, List[unicode]], EventTypeName: str = None, SourceUri: str = None,
               Parents: List[str] = None, Content: unicode = None) -> 'EDXMLEvent': ...

    def GetTypeName(self) -> str: ...

    def GetSourceUri(self) -> str: ...

    def GetProperties(self) -> Dict[str, List[unicode]]: ...

    def GetExplicitParents(self) -> List[str]: ...

    def GetContent(self) -> unicode: ...

    @classmethod
    def Read(cls, EventTypeName: str, SourceUri: str, EventElement: etree.Element) -> 'EDXMLEvent': ...

    def SetProperties(self, properties: Dict[str, List[unicode]]) -> 'EDXMLEvent': ...

    def CopyPropertiesFrom(self, SourceEvent: 'EDXMLEvent', PropertyMap: Dict[str, str]) -> 'EDXMLEvent': ...

    def MovePropertiesFrom(self, SourceEvent: 'EDXMLEvent', PropertyMap: Dict[str, str]) -> 'EDXMLEvent': ...

    def SetType(self, EventTypeName: str) -> 'EDXMLEvent': ...

    def SetContent(self, Content: unicode) -> 'EDXMLEvent': ...

    def SetSource(self, SourceUri: str) -> 'EDXMLEvent': ...

    def AddParents(self, ParentHashes: List[str]) -> 'EDXMLEvent': ...

    def SetParents(self, ParentHashes: List[str]) -> 'EDXMLEvent': ...

    def MergeWith(self, collidingEvents: List['EDXMLEvent'], edxmlOntology: edxml.ontology.Ontology) -> bool: ...

    def ComputeStickyHash(self, edxmlOntology: edxml.ontology.Ontology): ...


class ParsedEvent(EDXMLEvent, EvilCharacterFilter, etree.ElementBase):

    def __init__(self, Properties: Dict[str, List[unicode]], EventTypeName: str = None, SourceUri: str = None,
                 Parents: List[str] = None, Content: unicode = None) -> None:
        super(EDXMLEvent).__init__(Properties, EventTypeName, SourceUri, Parents, Content)
        self.__properties = ...  # type: Dict[str, List[unicode]]

    def flush(self) -> 'ParsedEvent': ...

    def copy(self) -> 'ParsedEvent': ...

    @classmethod
    def CreateElement(cls, Properties: Dict[str, List[unicode]], Parents: List[str] = None,
                      Content: unicode = None) -> etree.Element: ...

    def GetTypeName(self) -> str: ...

    def GetExplicitParents(self) -> List[str]: ...

    def GetContent(self) -> unicode: ...

    @classmethod
    def Read(cls, EventTypeName: str, SourceUri: str, EventElement: etree.Element) -> 'ParsedEvent': ...

    def SetProperties(self, properties: Dict[str, List[unicode]]) -> 'ParsedEvent': ...

    def CopyPropertiesFrom(self, SourceEvent: 'ParsedEvent', PropertyMap: Dict[str, str]) -> 'ParsedEvent': ...

    def MovePropertiesFrom(self, SourceEvent: 'ParsedEvent', PropertyMap: Dict[str, str]) -> 'ParsedEvent': ...

    def SetType(self, EventTypeName: str) -> 'ParsedEvent': ...

    def SetContent(self, Content: unicode) -> 'ParsedEvent': ...

    def SetSource(self, SourceUri: str) -> 'ParsedEvent': ...

    def AddParents(self, ParentHashes: List[str]) -> 'ParsedEvent': ...

    def SetParents(self, ParentHashes: List[str]) -> 'ParsedEvent': ...

    def MergeWith(self, collidingEvents: List['ParsedEvent'], edxmlOntology: edxml.ontology.Ontology) -> bool: ...

    def ComputeStickyHash(self, edxmlOntology: edxml.ontology.Ontology): ...


class EventElement(EDXMLEvent, EvilCharacterFilter):

    def __init__(self, Properties: Dict[str, List[unicode]], EventTypeName: str = None, SourceUri: str = None,
                 Parents: List[str] = None, Content: unicode = None) -> None:
        super(EDXMLEvent).__init__(Properties, EventTypeName, SourceUri, Parents, Content)
        self.__properties = ...  # type: Dict[str, List[unicode]]
        self.element = ...      # type: etree.Element

    def copy(self) -> 'EventElement': ...

    @classmethod
    def CreateElement(cls, Properties: Dict[str, List[unicode]], Parents: List[str] = None,
                      Content: unicode = None) -> etree.Element: ...

    def GetTypeName(self) -> str: ...

    def GetExplicitParents(self) -> List[str]: ...

    def GetContent(self) -> unicode: ...

    @classmethod
    def Read(cls, EventTypeName: str, SourceUri: str, EventElement: etree.Element) -> 'EventElement': ...

    def SetProperties(self, properties: Dict[str, List[unicode]]) -> 'EventElement': ...

    def CopyPropertiesFrom(self, SourceEvent: 'EventElement', PropertyMap: Dict[str, str]) -> 'EventElement': ...

    def MovePropertiesFrom(self, SourceEvent: 'EventElement', PropertyMap: Dict[str, str]) -> 'EventElement': ...

    def SetType(self, EventTypeName: str) -> 'EventElement': ...

    def SetContent(self, Content: unicode) -> 'EventElement': ...

    def SetSource(self, SourceUri: str) -> 'EventElement': ...

    def AddParents(self, ParentHashes: List[str]) -> 'EventElement': ...

    def SetParents(self, ParentHashes: List[str]) -> 'EventElement': ...

    def MergeWith(self, collidingEvents: List['EventElement'], edxmlOntology: edxml.ontology.Ontology) -> bool: ...

    def ComputeStickyHash(self, edxmlOntology: edxml.ontology.Ontology): ...
